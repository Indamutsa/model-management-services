apiVersion: v1
kind: ConfigMap
metadata:
  name: auth-mysql-conf
data:
  db_url: jdbc:mysql://user-manager-service:3306/dbauth?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
  setup: |
    -- create the databases
    CREATE DATABASE IF NOT EXISTS dbauth;

    -- create the users for each database
    CREATE USER 'arsene'@'localhost' IDENTIFIED BY 'arsene';
    GRANT CREATE, ALTER, INDEX, LOCK TABLES, REFERENCES, UPDATE, DELETE, DROP, SELECT, INSERT ON `dbauth`.* TO 'arsene'@'localhost';

    FLUSH PRIVILEGES;

---
apiVersion: v1
kind: Secret
metadata:
  name: auth-mysql-secret
type: Opaque
data:
  username: YXJzZW5l
  password: YXJzZW5l
  database: ZGJhdXRo
  root-password: YXJzZW5l

# ---
# apiVersion: v1
# kind: PersistentVolume #Creating a persistence volume
# metadata:
#   name: mysql-pv
#   labels:
#     type: local
# spec:
#   storageClassName: standard
#   capacity:
#     storage: 300Mi
#   accessModes:
#     - ReadWriteOnce
#   hostPath:
#     path: "/mnt/data/"
#   persistentVolumeReclaimPolicy: Retain #Retain the volume even after is deleted

---
apiVersion: v1
kind: PersistentVolumeClaim # The claim request the persistence volume
metadata:
  name: user-manager-pv-claim
  labels:
    app: user-manager-app
spec:
  storageClassName: standard # Request a certain storage class name
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 300Mi

---
apiVersion: v1
kind: Service
metadata:
  name: user-manager-service
  labels:
    app: user-manager-app
spec:
  type: ClusterIP 
  ports:
    - port: {{ .Values.service.dbauth_mysql.port }}
      targetPort: {{ .Values.service.dbauth_mysql.port }}
  selector:
    app: user-manager-app
    tier: dbauth-mysql

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-manager-deployment
  labels:
    app: user-manager-app
spec:
  selector:
    matchLabels:
      app: user-manager-app
      tier: dbauth-mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: user-manager-app
        tier: dbauth-mysql
    spec:
      containers:
        - image: {{ .Values.deployment.dbauth_mysql.image }}:{{ .Values.deployment.dbauth_mysql.tag }}
          name: dbauth-mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: auth-mysql-secret
                  key: root-password
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: auth-mysql-secret
                  key: database
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: auth-mysql-secret
                  key: username
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: auth-mysql-secret
                  key: password
          ports:
            - containerPort: {{ .Values.deployment.dbauth_mysql.containerPort }} 
              name: dbauth-mysql
          volumeMounts:
            - name: user-manager-storage
              mountPath: /var/lib/mysql
            - name: user-manager-mysql-setup
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: user-manager-storage
          persistentVolumeClaim:
            claimName: user-manager-pv-claim
        - name: user-manager-mysql-setup
          configMap:
            name: auth-mysql-conf
            items:
              - key: setup
                path: setup.sql
